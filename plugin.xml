<?xml version="1.0" encoding="UTF-8"?>
<?eclipse version="3.4"?>
<plugin>

<extension
      point="de.toem.toolkits.general.serializer"> 
      
      <serializer
            class="de.toem.impulse.extension.eda.transaction.scv.ScvReader">
      </serializer> 

      <serializer
            class="de.toem.impulse.extension.eda.transaction.ftr.FtrReader">
      </serializer>  
</extension>

<extension
      point="de.toem.impulse.samples.processor">

      <processor
            class="de.toem.impulse.extension.eda.transaction.tlm.TlmPhaseAnalyzer">
      </processor>

      <processor
            class="de.toem.impulse.extension.eda.transaction.axi3.Axi3Analyzer">
      </processor>
</extension>

<extension
	point="de.toem.toolkits.cell.producer">

	<producer class="de.toem.impulse.usecase.eda.transaction.TransactionMetrics" />

</extension>

<extension
		point="de.toem.toolkits.general.templates">
    <processor.java name="FN Transaction Analyzer" javaBundle="de.toem.impulse.base,de.toem.impulse.extension.eda.transaction" tags="transactions, tlm" javaHash="-2140549450">
        <impl>package de.toem.impulse.usecase.eda.transaction.implementation;&lt;br/&gt;&lt;br/&gt;import java.util.List;&lt;br/&gt;import java.util.Map;&lt;br/&gt;&lt;br/&gt;import de.toem.impulse.samples.IMemberDescriptor;&lt;br/&gt;import de.toem.impulse.samples.IReadableSample;&lt;br/&gt;import de.toem.impulse.samples.IReadableSamples;&lt;br/&gt;import de.toem.impulse.samples.ISample;&lt;br/&gt;import de.toem.impulse.samples.ISamplePointer;&lt;br/&gt;import de.toem.impulse.samples.ISamplePointerIterator;&lt;br/&gt;import de.toem.impulse.samples.processor.ISamplesProcessorDescriptor;&lt;br/&gt;import de.toem.impulse.usecase.eda.transaction.ITransaction.PhasesListener;&lt;br/&gt;import de.toem.impulse.usecase.eda.transaction.AbstractTransactionAnalyzer;&lt;br/&gt;import de.toem.toolkits.core.Utils;&lt;br/&gt;import de.toem.toolkits.pattern.threading.IProgress;&lt;br/&gt;&lt;br/&gt;public class FlexNocTransactionDeducer extends AbstractTransactionAnalyzer {&lt;br/&gt;&lt;br/&gt;    // ========================================================================================================================&lt;br/&gt;    // Constructors&lt;br/&gt;    // ========================================================================================================================&lt;br/&gt;    &lt;br/&gt;    public FlexNocTransactionDeducer() {&lt;br/&gt;        super();&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    public FlexNocTransactionDeducer(ISamplesProcessorDescriptor descriptor, String configuration, String id, String label, String description,&lt;br/&gt;            String tags, Map&amp;lt;Object, IReadableSamples&amp;gt; sources, String[][] properties, int modes) {&lt;br/&gt;        super(descriptor, configuration, id, label, description, tags, sources, properties, modes &amp;amp; MODE_MAIN_SLAVE_PROCESSING);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    // ========================================================================================================================&lt;br/&gt;    // Support Interface&lt;br/&gt;    // ========================================================================================================================&lt;br/&gt;&lt;br/&gt;    /**&lt;br/&gt;     * Determines if this reader supports the specified functionality request.&lt;br/&gt;     *&lt;br/&gt;     * @param request An Integer identifying the functionality being queried&lt;br/&gt;     * @param context Additional context for the request&lt;br/&gt;     * @return true if the reader supports the requested functionality, false otherwise&lt;br/&gt;     */&lt;br/&gt;    public static boolean supports(Object request, Object context) {&lt;br/&gt;        int ir = request instanceof Integer ? ((Integer) request).intValue() : -1;&lt;br/&gt;        return AbstractTransactionAnalyzer.supports(request, context) ||  ir == (ir &amp;amp; (SUPPORT_OPTIONAL_MAIN_PROCESSING));&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    public static boolean isDefault(Object context) {&lt;br/&gt;        if (context instanceof IReadableSamples) {&lt;br/&gt;            String id = ((IReadableSamples) context).getId();&lt;br/&gt;            if (id == null || !id.contains(&amp;quot;_CP_&amp;quot;) || (!id.endsWith(&amp;quot;_T&amp;quot;) &amp;amp;&amp;amp; !id.endsWith(&amp;quot;_I&amp;quot;)))&lt;br/&gt;                return false;&lt;br/&gt;            return true;&lt;br/&gt;        }&lt;br/&gt;        return false;&lt;br/&gt;    }&lt;br/&gt;    &lt;br/&gt;    // ========================================================================================================================&lt;br/&gt;    // Find phases&lt;br/&gt;    // ========================================================================================================================&lt;br/&gt;    @Override&lt;br/&gt;    public  boolean findPhases(IProgress p, ISamplePointerIterator iter, Map&amp;lt;Object,ISamplePointer&amp;gt; pointers, PhasesListener&amp;lt;Pending&amp;gt; listener,Map&amp;lt;Long, Pending&amp;gt; pending) {&lt;br/&gt;        &lt;br/&gt;        // get first value of map that is != null&lt;br/&gt;        ISamplePointer pointer = pointers != null ? pointers.values().stream().filter(pn -&amp;gt; pn != null).findFirst().orElse(null) : null;&lt;br/&gt;        if (pointer == null)&lt;br/&gt;            return false;&lt;br/&gt;        IMemberDescriptor member_message = pointer.getMemberDescriptor(&amp;quot;Message&amp;quot;);&lt;br/&gt;        while (iter.hasNext()) {&lt;br/&gt;            long current = iter.next();&lt;br/&gt;            IReadableSample sample = pointer.compound(ISample.VALUE_WRITABLE);&lt;br/&gt;            String message = sample.stringValueOf(member_message);&lt;br/&gt;            if (Utils.isEmpty(message))&lt;br/&gt;                continue;&lt;br/&gt;            // request incoming @1000000800 RD len:128 flow:0 seq:0 user:0 urg:0 status:1 ptr:0xc54a980&lt;br/&gt;            if (message.startsWith(&amp;quot;request incoming &amp;quot;)) {&lt;br/&gt;                String splitted[] = message.substring(17).split(&amp;quot;\\s+&amp;quot;);&lt;br/&gt;                long uid = Utils.parseLong(splitted[8].substring(4), -1);&lt;br/&gt;                long address = Utils.parseLong(&amp;quot;0x&amp;quot; + splitted[0].substring(1), -1);&lt;br/&gt;                String cmd = splitted[1];&lt;br/&gt;                int dataLength = Utils.parseInt(splitted[2].substring(4), 0);&lt;br/&gt;                boolean partial = false;&lt;br/&gt;                if (uid &amp;gt;= 0)&lt;br/&gt;                    listener.beginReq(current, uid, partial,  0, sample, true, pending,cmd,address, dataLength);&lt;br/&gt;            }&lt;br/&gt;            // got response end for @1000000000 RD len:128 flow:0 seq:0 user:0 urg:0 status:1 ptr:0xc5388c0 progress 112&lt;br/&gt;            else if (message.startsWith(&amp;quot;got response end for &amp;quot;)) {&lt;br/&gt;                String splitted[] = message.substring(21).split(&amp;quot;\\s+&amp;quot;);&lt;br/&gt;                long uid = Utils.parseLong(splitted[8].substring(4), -1);&lt;br/&gt;                int dataLength = Utils.parseInt(splitted[2].substring(4), 0);&lt;br/&gt;                int progress = Utils.parseInt(splitted[10], 0);&lt;br/&gt;                boolean partial = progress &amp;lt; dataLength;&lt;br/&gt;                if (uid &amp;gt;= 0)&lt;br/&gt;                    listener.beginResp(current, uid, partial, progress, sample, true, pending);&lt;br/&gt;            }&lt;br/&gt;            // @1c0000000 WR len:256 flow:0 seq:0 user:0 urg:0 status:0 ptr:0x25143080 from/to 0/256;inBegin{1};Info{1}&lt;br/&gt;            else if (message.startsWith(&amp;quot;@&amp;quot;) &amp;amp;&amp;amp; !message.contains(&amp;quot;???&amp;quot;) &amp;amp;&amp;amp; pointer.getId().endsWith(&amp;quot;T&amp;quot;)) {&lt;br/&gt;                String splitted[] = message.split(&amp;quot;\\s+&amp;quot;);&lt;br/&gt;                long uid = Utils.parseLong(splitted[8].substring(4), -1);&lt;br/&gt;                long address = Utils.parseLong(&amp;quot;0x&amp;quot; + splitted[0].substring(1), -1);&lt;br/&gt;                String cmd = splitted[1];&lt;br/&gt;                int dataLength = Utils.parseInt(splitted[2].substring(4), 0);&lt;br/&gt;                boolean partial = false;&lt;br/&gt;                if (uid &amp;gt;= 0)&lt;br/&gt;                    listener.beginReq(current, uid, partial, 0, sample, true, pending,cmd,address, dataLength);&lt;br/&gt;            }&lt;br/&gt;            // got response end for @1000000000 RD len:128 flow:0 seq:0 user:0 urg:0 status:1 ptr:0xc5388c0 progress 112&lt;br/&gt;            else if (message.startsWith(&amp;quot;RELEASE&amp;quot;) &amp;amp;&amp;amp; message.contains(&amp;quot;inTransaction&amp;quot;) &amp;amp;&amp;amp; pointer.getId().endsWith(&amp;quot;T&amp;quot;)) {&lt;br/&gt;                int n = message.indexOf(&amp;quot;ptr=&amp;quot;);&lt;br/&gt;                int m = message.indexOf(&amp;quot; &amp;quot;, n + 1);&lt;br/&gt;                if (n &amp;gt; 0) {&lt;br/&gt;                    long uid = Utils.parseLong(message.substring(n + 4, m), -1);&lt;br/&gt;                    if (uid &amp;gt;= 0)&lt;br/&gt;                        listener.beginResp(current, uid, false, 0, sample, true, pending);&lt;br/&gt;                }&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;        return true;&lt;br/&gt;    }&lt;br/&gt;}</impl>
    </processor.java>

</extension> 
</plugin>
